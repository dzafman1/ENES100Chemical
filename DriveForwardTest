#include "Enes100Simulation.h"
#include "DFRTankSimulation.h"

#define abs(x) ((x)>0?(x):-(x))

Enes100Simulation enes;
DFRTankSimulation tank;

float locError=.30;
int stuckInLoop = 0; 

void setup() {
  tank.init();
  enes.println("Starting Navigation");
  while (!enes.retrieveDestination());
  while (!enes.updateLocation());
  missionSite();
}

void loop() {
  driveForward(1, enes.location.x, enes.location.y, enes.location.theta);
  enes.print("done");
  
}

void missionSite() {
  enes.updateLocation();
  enes.retrieveDestination();
  float currentX = enes.location.x;
  float currentY = enes.location.y;
  float currentTheta = enes.location.theta * 100 / 100;
  float destinationX = enes.destination.x;
  float destinationY = enes.destination.y;
  float EPSILON = 0.01;
  float deltY = (destinationY - currentY);
  float deltX = (destinationX - currentX);
  float destinationTheta = atan(deltY / deltX) * 100 / 100;
  while (destinationTheta != currentTheta) {
    enes.updateLocation();
    enes.retrieveDestination();
    destinationX = enes.destination.x;
    destinationY = enes.destination.y;
    currentX = enes.location.x;
    currentY = enes.location.y;
    deltY = (destinationY - currentY);
    deltX = (destinationX - currentX);
    currentTheta = enes.location.theta * 100 / 100;
    destinationTheta = atan(deltY / deltX) * 100 / 100;
    if(destinationTheta<=0&&currentTheta<=0){
      if (abs(destinationTheta) <= abs(currentTheta)) {
      tank.setLeftMotorPWM(-40);
      tank.setRightMotorPWM(40);
    }
      else{
      tank.setLeftMotorPWM(40);
      tank.setRightMotorPWM(-40);  
      }
    }
    else if(destinationTheta>0&&currentTheta>0){
      if (destinationTheta <= currentTheta) {
      tank.setLeftMotorPWM(40);
      tank.setRightMotorPWM(-40);
    }
      else{
      tank.setLeftMotorPWM(-40);
      tank.setRightMotorPWM(40);  
      }
    }
    else if(destinationTheta<=0&&currentTheta>=0){
      if(abs(destinationTheta-currentTheta)<=3.14){
        tank.setLeftMotorPWM(40);
        tank.setRightMotorPWM(-40);
      }
      else{
        tank.setLeftMotorPWM(-40);
        tank.setRightMotorPWM(40);  
      }
    }
    else if(destinationTheta>=0&&currentTheta<=0){
      if(abs(destinationTheta-currentTheta)<=3.14){
        tank.setLeftMotorPWM(-40);
        tank.setRightMotorPWM(40);
      }
      else{
        tank.setLeftMotorPWM(40);
        tank.setRightMotorPWM(-40);  
      }
    }
    //enes.println("");
    //enes.print(destinationTheta);
    //enes.print("     ");
    //enes.print(currentTheta);
    if (currentTheta <= destinationTheta + EPSILON && currentTheta >= destinationTheta - EPSILON) {
      break; 
    }
  }
  enes.print("done");
}

boolean driveForward(float d, float x, float y, float t){
  float destX = x+(d*cos(abs(t)));
  float destY;
  if(t>0){
  destY=y+(d*sin(abs(t)));
  enes.println(t);
  enes.println(x);
  enes.println(y);
  enes.println(destX);
  enes.println(destY);
  //delay(5000);
  enes.updateLocation();
  while((enes.location.x<destX)&&(enes.location.y<destY)){
    enes.updateLocation();
    enes.retrieveDestination();
    tank.setLeftMotorPWM(255);
    tank.setRightMotorPWM(255);
    /*if((enes.location.x<destX)&&(enes.location.y<destY)){
      break;
    }
    */
    tank.setLeftMotorPWM(0);
    tank.setRightMotorPWM(0);
    }
  }
  if(t<=0){
  destY=y-(d*sin(abs(t)));
  enes.println(t);
  enes.println(x);
  enes.println(y);
  enes.println(destX);
  enes.println(destY);
  //delay(5000);
  while((enes.location.x<destX)&&(enes.location.y>destY)){
  enes.updateLocation();
  enes.retrieveDestination();
  tank.setLeftMotorPWM(255);
  tank.setRightMotorPWM(255);
  /*if((enes.location.x<destX)&&(enes.location.y>destY)){
    break;  
  }
  */
  tank.setLeftMotorPWM(0);
  tank.setRightMotorPWM(0);
  }
  }
}
